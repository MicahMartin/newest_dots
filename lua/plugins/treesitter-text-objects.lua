return {
  "nvim-treesitter/nvim-treesitter-textobjects",
  branch = "main",
  ---@type TSTextObjects.UserConfig
  opts = {
    ---@type TSTextObjects.Config.Select
    select = {
      lookahead = true,
      include_surrounding_whitespace = false,
    },
    ---@type TSTextObjects.Config.Move
    move = {
      set_jumps = true,
    },
    selection_modes = {
      ["@parameter.outer"] = "v", -- charwise
      ["@function.outer"] = "V", -- linewise
      ["@class.outer"] = "<c-v>", -- blockwise
    },
  },
  config = function()
    local select = require("nvim-treesitter-textobjects.select")
    for _, mode in ipairs({ "x", "o" }) do
      -- assignments
      vim.keymap.set(mode, "aa", function()
        select.select_textobject("@assignment.outer", "textobjects")
      end, { desc = "Select around assignment" })
      vim.keymap.set(mode, "ia", function()
        select.select_textobject("@assignment.inner", "textobjects")
      end, { desc = "Select inside assignment" })
      vim.keymap.set(mode, "la", function()
        select.select_textobject("@assignment.lhs", "textobjects")
      end, { desc = "Select left side of assignment" })
      vim.keymap.set(mode, "ra", function()
        select.select_textobject("@assignment.rhs", "textobjects")
      end, { desc = "Select right side of assignment" })
      -- Loops
      vim.keymap.set(mode, "ao", function()
        select.select_textobject("@loop.outer", "textobjects")
      end, { desc = "Select around loop" })
      vim.keymap.set(mode, "io", function()
        select.select_textobject("@loop.inner", "textobjects")
      end, { desc = "Select inside loop" })
      -- function defs
      vim.keymap.set(mode, "af", function()
        select.select_textobject("@function.outer", "textobjects")
      end, { desc = "Select around function" })
      vim.keymap.set(mode, "if", function()
        select.select_textobject("@function.inner", "textobjects")
      end, { desc = "Select inside function" })
      -- classes
      vim.keymap.set(mode, "ak", function()
        select.select_textobject("@class.outer", "textobjects")
      end, { desc = "Select around class" })
      vim.keymap.set(mode, "ik", function()
        select.select_textobject("@class.inner", "textobjects")
      end, { desc = "Select inside class" })
      -- conditionals
      vim.keymap.set(mode, "ai", function()
        select.select_textobject("@conditional.outer", "textobjects")
      end, { desc = "Select around conditional" })
      vim.keymap.set(mode, "ii", function()
        select.select_textobject("@conditional.inner", "textobjects")
      end, { desc = "Select inside conditional" })
      -- params/args
      vim.keymap.set(mode, "ar", function()
        select.select_textobject("@parameter.outer", "textobjects")
      end, { desc = "Select around parameter" })
      vim.keymap.set(mode, "ir", function()
        select.select_textobject("@parameter.inner", "textobjects")
      end, { desc = "Select inside parameter" })
      -- fn invocations/calls
      vim.keymap.set(mode, "av", function()
        select.select_textobject("@call.outer", "textobjects")
      end, { desc = "Select around function call" })
      vim.keymap.set(mode, "iv", function()
        select.select_textobject("@call.inner", "textobjects")
      end, { desc = "Select inside function call" })
      -- comments
      vim.keymap.set(mode, "ac", function()
        select.select_textobject("@comment.outer", "textobjects")
      end, { desc = "Select around comment" })

      -- vim.keymap.set(mode, "as", function()
      --   select.select_textobject("@statement.outer", "textobjects")
      -- end, { desc = "Select around statement" })
      --
      -- vim.keymap.set(mode, "is", function()
      --   select.select_textobject("@statement.outer", "textobjects")
      -- end, { desc = "Select inside statement" })
    end
    -- swap
    local swap = require("nvim-treesitter-textobjects.swap")
    -- blocks
    vim.keymap.set("n", ")B", function()
      swap.swap_next("@block.outer")
    end, { desc = "Swap with next block" })
    vim.keymap.set("n", "(B", function()
      swap.swap_previous("@block.outer")
    end, { desc = "Swap with previous block" })
    -- numbers
    vim.keymap.set("n", ")N", function()
      swap.swap_next("@number.inner")
    end, { desc = "Swap with next number" })
    vim.keymap.set("n", "(N", function()
      swap.swap_previous("@number.inner")
    end, { desc = "Swap with previous number" })
    -- assignments
    vim.keymap.set("n", ")a", function()
      swap.swap_next("@assignment.outer")
    end, { desc = "Swap with next assignment" })
    vim.keymap.set("n", "(a", function()
      swap.swap_previous("@assignment.outer")
    end, { desc = "Swap with previous assignment" })
    -- comments
    vim.keymap.set("n", ")c", function()
      swap.swap_next("@comment.outer")
    end, { desc = "Swap with next comment" })
    vim.keymap.set("n", "(c", function()
      swap.swap_previous("@comment.outer")
    end, { desc = "Swap with previous comment" })
    -- params/args
    vim.keymap.set("n", ")r", function()
      swap.swap_next("@parameter.inner")
    end, { desc = "Swap with next parameter" })
    vim.keymap.set("n", "(r", function()
      swap.swap_previous("@parameter.inner")
    end, { desc = "Swap with previous parameter" })
    -- classes
    vim.keymap.set("n", ")k", function()
      swap.swap_next("@class.outer")
    end, { desc = "Swap with next class" })
    vim.keymap.set("n", "(k", function()
      swap.swap_previous("@class.outer")
    end, { desc = "Swap with previous class" })
    -- function definitions
    vim.keymap.set("n", "(f", function()
      swap.swap_previous("@function.outer")
    end, { desc = "Swap with previous function" })
    vim.keymap.set("n", ")f", function()
      swap.swap_next("@function.outer")
    end, { desc = "Swap with next function" })
    -- function invocations/calls
    vim.keymap.set("n", "(v", function()
      swap.swap_previous("@call.outer")
    end, { desc = "Swap with previous call" })
    vim.keymap.set("n", ")v", function()
      swap.swap_next("@call.outer")
    end, { desc = "Swap with next call" })
    -- move
    local move = require("nvim-treesitter-textobjects.move")
    -- assignments
    vim.keymap.set("n", "]a", function()
      move.goto_next_start("@assignment.outer")
    end, { desc = "next assignment start" })
    vim.keymap.set("n", "]A", function()
      move.goto_next_end("@assignment.outer")
    end, { desc = "next assignment end" })
    vim.keymap.set("n", "[a", function()
      move.goto_previous_start("@assignment.outer")
    end, { desc = "prev assignment start" })
    vim.keymap.set("n", "[A", function()
      move.goto_previous_end("@assignment.outer")
    end, { desc = "next assignment end" })
    -- blocks
    vim.keymap.set("n", "]B", function()
      move.goto_next_start("@block.outer")
    end, { desc = "next block start" })
    vim.keymap.set("n", "[B", function()
      move.goto_previous_start("@block.outer")
    end, { desc = "prev block start" })
    -- numbers
    vim.keymap.set("n", "]N", function()
      move.goto_next_start("@number.inner")
    end, { desc = "next number" })
    vim.keymap.set("n", "[N", function()
      move.goto_previous_start("@number.inner")
    end, { desc = "prev number" })
    -- function definitions
    vim.keymap.set({ "n", "x", "o" }, "]f", function()
      move.goto_next_start("@function.outer")
    end, { desc = "Go to next function def start (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "]]f", function()
      move.goto_next_start("@function.inner")
    end, { desc = "Go to next function def start (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "]F", function()
      move.goto_next_end("@function.outer")
    end, { desc = "Go to next function def end (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "]]F", function()
      move.goto_next_end("@function.inner")
    end, { desc = "Go to next function def end (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "[f", function()
      move.goto_previous_start("@function.outer")
    end, { desc = "Go to previous function def start (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "[[f", function()
      move.goto_previous_start("@function.inner")
    end, { desc = "Go to previous function def start (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "[F", function()
      move.goto_previous_end("@function.outer")
    end, { desc = "Go to previous function def end (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "[[F", function()
      move.goto_previous_end("@function.inner")
    end, { desc = "Go to previous function def end (inner)" })
    -- function invocations/calls
    vim.keymap.set({ "n", "x", "o" }, "]v", function()
      move.goto_next_start("@call.outer")
    end, { desc = "Go to next function call start (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "]]v", function()
      move.goto_next_start("@call.inner")
    end, { desc = "Go to next function call start (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "]V", function()
      move.goto_next_end("@call.outer")
    end, { desc = "Go to next function call end (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "]]V", function()
      move.goto_next_end("@call.inner")
    end, { desc = "Go to next function call end (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "[v", function()
      move.goto_previous_start("@call.outer")
    end, { desc = "Go to previous function call start (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "[[v", function()
      move.goto_previous_start("@call.inner")
    end, { desc = "Go to previous function call start (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "[V", function()
      move.goto_previous_end("@call.outer")
    end, { desc = "Go to previous function call end (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "[[V", function()
      move.goto_previous_end("@call.inner")
    end, { desc = "Go to previous function call end (inner)" })
    -- conditionals
    vim.keymap.set({ "n", "x", "o" }, "]i", function()
      move.goto_next_start("@conditional.outer")
    end, { desc = "Go to next conditional start (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "]]i", function()
      move.goto_next_start("@conditional.inner")
    end, { desc = "Go to next conditional start (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "]I", function()
      move.goto_next_end("@conditional.outer")
    end, { desc = "Go to next conditional end (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "]]I", function()
      move.goto_next_end("@conditional.inner")
    end, { desc = "Go to next conditional end (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "[i", function()
      move.goto_previous_start("@conditional.outer")
    end, { desc = "Go to previous conditional start (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "[[i", function()
      move.goto_previous_start("@conditional.inner")
    end, { desc = "Go to previous conditional start (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "[I", function()
      move.goto_previous_end("@conditional.outer")
    end, { desc = "Go to previous conditional end (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "[[I", function()
      move.goto_previous_end("@conditional.inner")
    end, { desc = "Go to previous conditional end (inner)" })
    -- loops
    vim.keymap.set({ "n", "x", "o" }, "]o", function()
      move.goto_next_start("@loop.outer")
    end, { desc = "Go to next loop start (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "]]o", function()
      move.goto_next_start("@loop.inner")
    end, { desc = "Go to next loop start (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "]O", function()
      move.goto_next_end("@loop.outer")
    end, { desc = "Go to next loop end (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "]]O", function()
      move.goto_next_end("@loop.inner")
    end, { desc = "Go to next loop end (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "[o", function()
      move.goto_previous_start("@loop.outer")
    end, { desc = "Go to previous loop start (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "[[o", function()
      move.goto_previous_start("@loop.inner")
    end, { desc = "Go to previous loop start (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "[O", function()
      move.goto_previous_end("@loop.outer")
    end, { desc = "Go to previous loop end (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "[[O", function()
      move.goto_previous_end("@loop.inner")
    end, { desc = "Go to previous loop end (inner)" })
    -- params/args
    vim.keymap.set({ "n", "x", "o" }, "]r", function()
      move.goto_next_start("@parameter.outer")
    end, { desc = "Go to next parameter start (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "]]r", function()
      move.goto_next_start("@parameter.inner")
    end, { desc = "Go to next parameter start (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "]R", function()
      move.goto_next_end("@parameter.outer")
    end, { desc = "Go to next parameter end (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "]]R", function()
      move.goto_next_end("@parameter.inner")
    end, { desc = "Go to next parameter end (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "[r", function()
      move.goto_previous_start("@parameter.outer")
    end, { desc = "Go to previous parameter start (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "[[r", function()
      move.goto_previous_start("@parameter.inner")
    end, { desc = "Go to previous parameter start (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "[R", function()
      move.goto_previous_end("@parameter.outer")
    end, { desc = "Go to previous parameter end (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "[[R", function()
      move.goto_previous_end("@parameter.inner")
    end, { desc = "Go to previous parameter end (inner)" })
    -- comments
    vim.keymap.set({ "n", "x", "o" }, "]c", function()
      move.goto_next_start("@comment.outer")
    end, { desc = "Go to next comment start (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "]C", function()
      move.goto_next_end("@comment.outer")
    end, { desc = "Go to next comment end (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "[c", function()
      move.goto_previous_start("@comment.outer")
    end, { desc = "Go to previous comment start (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "[C", function()
      move.goto_previous_end("@comment.outer")
    end, { desc = "Go to previous comment end (outer)" })
    -- classes
    vim.keymap.set({ "n", "x", "o" }, "]k", function()
      move.goto_next_start("@class.outer")
    end, { desc = "Go to next class start (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "]]k", function()
      move.goto_next_start("@class.inner")
    end, { desc = "Go to next class start (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "]K", function()
      move.goto_next_end("@class.outer")
    end, { desc = "Go to next class end (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "]]K", function()
      move.goto_next_end("@class.inner")
    end, { desc = "Go to next class end (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "[k", function()
      move.goto_previous_start("@class.outer")
    end, { desc = "Go to previous class start (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "[[k", function()
      move.goto_previous_start("@class.inner")
    end, { desc = "Go to previous class start (inner)" })
    vim.keymap.set({ "n", "x", "o" }, "[K", function()
      move.goto_previous_end("@class.outer")
    end, { desc = "Go to previous class end (outer)" })
    vim.keymap.set({ "n", "x", "o" }, "[[K", function()
      move.goto_previous_end("@class.inner")
    end, { desc = "Go to previous class end (inner)" })
  end,
}
